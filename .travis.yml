sudo: required
dist: trusty

services:
- docker

env: 
  - ARCH=s390x
  - ARCH=amd64

before_install:
  - sudo apt-get update
  - sudo apt-get -y install binfmt-support
  - curl -fsSL http://archive.ubuntu.com/ubuntu/pool/universe/q/qemu/qemu-user-static_2.11+dfsg-1ubuntu7_amd64.deb -o emu-user-static.deb
  - sudo apt install -f -y ./qemu-user-static.deb

 
install:
  - sudo cp /usr/bin/docker /usr/bin/docker-cli.bak
  - sudo curl -fsSL https://github.com/clnperez/cli/releases/download/1.0/docker-linux-amd64 -o /usr/bin/docker
  - echo "{\"experimental\":true}" | sudo tee /etc/docker/daemon.json
  - sudo service docker restart
  - sed s/"@@ARCH@@"/"${ARCH}"/g Dockerfile > Dockerfile."${ARCH}"
  - git clone https://github.com/computermouth/qemu-static-conf.git
  - sudo mkdir -p /lib/binfmt.d
  - sudo cp qemu-static-conf/*.conf /lib/binfmt.d/
  - sudo /etc/init.d/binfmt-support restart
  - sudo cat /proc/sys/fs/binfmt_misc/status
  - docker run --rm --privileged multiarch/qemu-user-static:register --reset

before_script:
  - export TAG=`if [[ $TRAVIS_PULL_REQUEST == "false" ]] && [[ $TRAVIS_BRANCH == "master" ]]; then echo "latest"; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi`

script:
  - travis_wait 60 docker build --compress --squash -t "${REPO}-${ARCH}:${TAG}" -f Dockerfile."${ARCH}" .
  - docker images "${REPO}-${ARCH}:${TAG}"

after_script:
  - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORT"
  - if [[ $TRAVIS_PULL_REQUEST == "false" ]] && [[ $TRAVIS_BRANCH == "master" ]]; then
    docker tag "${REPO}"-"${ARCH}":"${TAG}" "${REPO}"-"${ARCH}":"${TRAVIS_BUILD_NUMBER}";
    docker push "${REPO}"-"${ARCH}":"${TRAVIS_BUILD_NUMBER}";
    fi 
  - docker push ${REPO}-${ARCH}:${TAG}
  - docker logout

jobs:
 include:
  stage: deploy manifest
  if: branch = master
  script: 
   - echo "{\"experimental\":true}" | sudo tee /etc/docker/daemon.json
   - sudo service docker restart
   - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORT"
   - docker pull "${REPO}-s390x";
   - docker pull "${REPO}-amd64";
   - docker manifest create "${REPO}" "${REPO}-s390x" "${REPO}-amd64";
   - docker manifest annotate --arch=$ARCH --os=linux 
   - docker manifest push "${REPO}";
   - docker manifest inspect $REPO
   - docker logout